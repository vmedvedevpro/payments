// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Payments.Infrastructure.Persistence;

#nullable disable

namespace Payments.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CurrencyCurrencyGroup", b =>
                {
                    b.Property<Guid>("CurrenciesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CurrencyGroupId")
                        .HasColumnType("uuid");

                    b.HasKey("CurrenciesId", "CurrencyGroupId");

                    b.HasIndex("CurrencyGroupId");

                    b.ToTable("CurrencyCurrencyGroup");
                });

            modelBuilder.Entity("CurrencyPaymentSystem", b =>
                {
                    b.Property<Guid>("CurrenciesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PaymentSystemId")
                        .HasColumnType("uuid");

                    b.HasKey("CurrenciesId", "PaymentSystemId");

                    b.HasIndex("PaymentSystemId");

                    b.ToTable("CurrencyPaymentSystem");
                });

            modelBuilder.Entity("Payments.Domain.Entities.Currency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("Payments.Domain.Entities.CurrencyGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("CurrencyGroups");
                });

            modelBuilder.Entity("Payments.Domain.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<Guid>("CurrencyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("PaymentSystemId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("PaymentSystemId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Payments.Domain.Entities.PaymentSystem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PaymentSystems");
                });

            modelBuilder.Entity("CurrencyCurrencyGroup", b =>
                {
                    b.HasOne("Payments.Domain.Entities.Currency", null)
                        .WithMany()
                        .HasForeignKey("CurrenciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Payments.Domain.Entities.CurrencyGroup", null)
                        .WithMany()
                        .HasForeignKey("CurrencyGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CurrencyPaymentSystem", b =>
                {
                    b.HasOne("Payments.Domain.Entities.Currency", null)
                        .WithMany()
                        .HasForeignKey("CurrenciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Payments.Domain.Entities.PaymentSystem", null)
                        .WithMany()
                        .HasForeignKey("PaymentSystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Payments.Domain.Entities.Payment", b =>
                {
                    b.HasOne("Payments.Domain.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Payments.Domain.Entities.PaymentSystem", null)
                        .WithMany("Payments")
                        .HasForeignKey("PaymentSystemId");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("Payments.Domain.Entities.PaymentSystem", b =>
                {
                    b.Navigation("Payments");
                });
#pragma warning restore 612, 618
        }
    }
}
